local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- GUI
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
local MenuFrame = Instance.new("Frame", ScreenGui)
local OpenButton = Instance.new("TextButton", ScreenGui)
local TeleportButton = Instance.new("TextButton", MenuFrame)
local SaveCoordsButton = Instance.new("TextButton", MenuFrame)
local FixedTeleportButton = Instance.new("TextButton", MenuFrame)
local RespawnCheckbox = Instance.new("TextButton", MenuFrame)
local LockPositionCheckbox = Instance.new("TextButton", MenuFrame)
local CoordinatesLabel = Instance.new("TextLabel", MenuFrame)
local CloseButton = Instance.new("TextButton", MenuFrame)

-- Variables
local savedPosition = nil
local respawnEnabled = false
local lockPositionEnabled = false
local lockedPosition = nil
local dragStart, startPos
local isDraggingMenu = {value = false}
local isDraggingOpenButton = {value = false}

-- Menu settings
MenuFrame.Size = UDim2.new(0, 300, 0, 300)
MenuFrame.Position = UDim2.new(0.5, -150, 0.5, -150)
MenuFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
MenuFrame.Visible = false
MenuFrame.BorderSizePixel = 0
MenuFrame.ClipsDescendants = true
MenuFrame.AnchorPoint = Vector2.new(0.5, 0.5)

-- Rounded corners for the menu
local MenuUICorner = Instance.new("UICorner", MenuFrame)
MenuUICorner.CornerRadius = UDim.new(0, 10)

-- Open button settings
OpenButton.Size = UDim2.new(0, 50, 0, 50)
OpenButton.Position = UDim2.new(0.5, -25, 0.5, -200)
OpenButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
OpenButton.Text = "+"
OpenButton.Visible = true

-- Rounded corners for the open button
local OpenButtonUICorner = Instance.new("UICorner", OpenButton)
OpenButtonUICorner.CornerRadius = UDim.new(0, 25)

-- Close button settings
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -35, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
CloseButton.Text = "X"

-- Coordinates label settings
CoordinatesLabel.Size = UDim2.new(1, -10, 0, 30)
CoordinatesLabel.Position = UDim2.new(0, 5, 0, 10)
CoordinatesLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
CoordinatesLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
CoordinatesLabel.Text = "Current Coordinates: Updating..."

-- Buttons
local buttons = {
    {TeleportButton, "Teleport to Player SberKon", Color3.fromRGB(100, 150, 250)},
    {SaveCoordsButton, "Save Current Position", Color3.fromRGB(100, 250, 150)},
    {RespawnCheckbox, "Enable Respawn at Saved Position: OFF", Color3.fromRGB(250, 200, 100)},
    {FixedTeleportButton, "Teleport to Fixed Coordinates", Color3.fromRGB(200, 100, 250)},
    {LockPositionCheckbox, "Lock Current Position: OFF", Color3.fromRGB(255, 150, 150)}
}

for i, data in ipairs(buttons) do
    local button, text, color = unpack(data)
    button.Size = UDim2.new(1, -20, 0, 30)
    button.Position = UDim2.new(0, 10, 0, 50 + (i - 1) * 40)
    button.BackgroundColor3 = color
    button.Text = text
    button.Parent = MenuFrame
end

-- Update coordinates
RunService.RenderStepped:Connect(function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local position = LocalPlayer.Character.HumanoidRootPart.Position
        CoordinatesLabel.Text = string.format("Current Coordinates: X: %.2f, Y: %.2f, Z: %.2f", position.X, position.Y, position.Z)
        if lockPositionEnabled and lockedPosition then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(lockedPosition)
        end
    else
        CoordinatesLabel.Text = "Current Coordinates: N/A"
    end
end)

-- Open and close menu
OpenButton.MouseButton1Click:Connect(function()
    MenuFrame.Visible = true
    OpenButton.Visible = false
end)

CloseButton.MouseButton1Click:Connect(function()
    MenuFrame.Visible = false
    OpenButton.Visible = true
end)

-- Teleport to player
TeleportButton.MouseButton1Click:Connect(function()
    local targetPlayer = Players:FindFirstChild("SberKon")
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character:MoveTo(targetPlayer.Character.HumanoidRootPart.Position)
    end
end)

-- Save current position
SaveCoordsButton.MouseButton1Click:Connect(function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        savedPosition = LocalPlayer.Character.HumanoidRootPart.Position
    end
end)

-- Respawn
RespawnCheckbox.MouseButton1Click:Connect(function()
    respawnEnabled = not respawnEnabled
    RespawnCheckbox.Text = "Enable Respawn at Saved Position: " .. (respawnEnabled and "ON" or "OFF")
end)

LocalPlayer.CharacterAdded:Connect(function(character)
    if respawnEnabled and savedPosition then
        character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(savedPosition)
    end
end)

-- Teleport to fixed coordinates
FixedTeleportButton.MouseButton1Click:Connect(function()
    LocalPlayer.Character:MoveTo(Vector3.new(-150.1, 439.5, -359.7))
end)

-- Lock current position
LockPositionCheckbox.MouseButton1Click:Connect(function()
    if not lockPositionEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        lockedPosition = LocalPlayer.Character.HumanoidRootPart.Position
        lockPositionEnabled = true
        LockPositionCheckbox.Text = "Lock Current Position: ON"
    else
        lockPositionEnabled = false
        lockedPosition = nil
        LockPositionCheckbox.Text = "Lock Current Position: OFF"
    end
end)

-- Dragging logic
local function enableDragging(frame, dragFlag)
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragFlag.value = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragFlag.value = false
        end
    end)
end

-- Connect InputChanged once
UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        if isDraggingMenu.value then
            local delta = input.Position - dragStart
            MenuFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        elseif isDraggingOpenButton.value then
            local delta = input.Position - dragStart
            OpenButton.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end
end)

-- Initialize dragging
enableDragging(MenuFrame, isDraggingMenu)
enableDragging(OpenButton, isDraggingOpenButton)
